diff -uprN q-e-qe-6.4.1/FFTXlib/fft_helper_subroutines.f90 q-e-qe-6.4.1_winpatch/FFTXlib/fft_helper_subroutines.f90
--- q-e-qe-6.4.1/FFTXlib/fft_helper_subroutines.f90	2019-09-17 23:00:06.249773000 +0900
+++ q-e-qe-6.4.1_winpatch/FFTXlib/fft_helper_subroutines.f90	2019-09-16 03:27:06.000000000 +0900
@@ -20,15 +20,20 @@ CONTAINS
      REAL(DP), INTENT(INOUT)  :: tg_rho(:)
      REAL(DP), INTENT(INOUT)  :: tg_rho_nc(:,:)
      REAL(DP), INTENT(OUT) :: rhos(:,:)
+     REAL(DP), allocatable  :: tg_rho_sendbuf(:), tg_rho_nc_sendbuf(:,:)
 
      INTEGER :: ierr, ioff, idx, ir3, ir, ipol, ioff_tg, nxyp, npol_
 !     write (*,*) ' enter tg_reduce_rho_1'
 
 #if defined(__MPI)
      IF( noncolin) THEN
-        CALL MPI_ALLREDUCE( MPI_IN_PLACE, tg_rho_nc, SIZE(tg_rho_nc), MPI_DOUBLE_PRECISION, MPI_SUM, desc%comm2, ierr )
+        allocate(tg_rho_nc_sendbuf, source=tg_rho_nc)
+        CALL MPI_ALLREDUCE( tg_rho_nc_sendbuf, tg_rho_nc, SIZE(tg_rho_nc), MPI_DOUBLE_PRECISION, MPI_SUM, desc%comm2, ierr )
+        deallocate(tg_rho_nc_sendbuf)
      ELSE
-        CALL MPI_ALLREDUCE( MPI_IN_PLACE, tg_rho, SIZE(tg_rho), MPI_DOUBLE_PRECISION, MPI_SUM, desc%comm2, ierr )
+        allocate(tg_rho_sendbuf, source=tg_rho)
+        CALL MPI_ALLREDUCE( tg_rho_sendbuf, tg_rho, SIZE(tg_rho), MPI_DOUBLE_PRECISION, MPI_SUM, desc%comm2, ierr )
+        deallocate(tg_rho_sendbuf)
      END IF
 #endif
      !
@@ -70,13 +75,16 @@ CONTAINS
      INTEGER, INTENT(IN) :: ispin
      REAL(DP), INTENT(INOUT)  :: tmp_rhos(:)
      REAL(DP), INTENT(OUT) :: rhos(:,:)
+     REAL(DP), allocatable  :: tmp_rhos_sendbuf(:)
 
      INTEGER :: ierr, ioff, idx, ir3, nxyp, ioff_tg
 !     write (*,*) ' enter tg_reduce_rho_2'
 
      IF ( desc%nproc2 > 1 ) THEN
 #if defined(__MPI)
-        CALL MPI_ALLREDUCE( MPI_IN_PLACE, tmp_rhos, SIZE(tmp_rhos), MPI_DOUBLE_PRECISION, MPI_SUM, desc%comm2, ierr )
+        allocate(tmp_rhos_sendbuf, source=tmp_rhos)
+        CALL MPI_ALLREDUCE( tmp_rhos_sendbuf, tmp_rhos, SIZE(tmp_rhos), MPI_DOUBLE_PRECISION, MPI_SUM, desc%comm2, ierr )
+        deallocate(tmp_rhos_sendbuf)
 #endif
      ENDIF
      !
@@ -98,13 +106,16 @@ CONTAINS
      TYPE(fft_type_descriptor), INTENT(in) :: desc
      REAL(DP), INTENT(INOUT)  :: tmp_rhos(:,:)
      REAL(DP), INTENT(OUT) :: rhos(:,:)
+     REAL(DP), allocatable  :: tmp_rhos_sendbuf(:,:)
 
      INTEGER :: ierr, from, ir3, ioff, nxyp, ioff_tg
 !     write (*,*) ' enter tg_reduce_rho_3'
 
      IF ( desc%nproc2 > 1 ) THEN
 #if defined(__MPI)
-        CALL MPI_ALLREDUCE( MPI_IN_PLACE, tmp_rhos, SIZE(tmp_rhos), MPI_DOUBLE_PRECISION, MPI_SUM, desc%comm2, ierr )
+        allocate(tmp_rhos_sendbuf, source=tmp_rhos)
+        CALL MPI_ALLREDUCE( tmp_rhos_sendbuf, tmp_rhos, SIZE(tmp_rhos), MPI_DOUBLE_PRECISION, MPI_SUM, desc%comm2, ierr )
+        deallocate(tmp_rhos_sendbuf)
 #endif
      ENDIF
      !
@@ -129,13 +140,16 @@ CONTAINS
      TYPE(fft_type_descriptor), INTENT(in) :: desc
      COMPLEX(DP), INTENT(INOUT)  :: tmp_rhos(:)
      COMPLEX(DP), INTENT(OUT) :: rhos(:)
+     COMPLEX(DP), allocatable  :: tmp_rhos_sendbuf(:)
 
      INTEGER :: ierr, from, ir3, ioff, nxyp, ioff_tg
 !     write (*,*) ' enter tg_reduce_rho_4'
 
      IF ( desc%nproc2 > 1 ) THEN
 #if defined(__MPI)
-        CALL MPI_ALLREDUCE( MPI_IN_PLACE, tmp_rhos, 2*SIZE(tmp_rhos), MPI_DOUBLE_PRECISION, MPI_SUM, desc%comm2, ierr )
+        allocate(tmp_rhos_sendbuf, source=tmp_rhos)
+        CALL MPI_ALLREDUCE( tmp_rhos_sendbuf, tmp_rhos, 2*SIZE(tmp_rhos), MPI_DOUBLE_PRECISION, MPI_SUM, desc%comm2, ierr )
+        deallocate(tmp_rhos_sendbuf)
 #endif
      ENDIF
      !
@@ -160,13 +174,16 @@ CONTAINS
      TYPE(fft_type_descriptor), INTENT(in) :: desc
      COMPLEX(DP), INTENT(INOUT)  :: tmp_rhos(:,:)
      COMPLEX(DP), INTENT(OUT) :: rhos(:,:)
+     COMPLEX(DP), allocatable :: tmp_rhos_sendbuf(:,:)
 
      INTEGER :: ierr, from, ir3, ioff, nxyp, ioff_tg
 !     write (*,*) ' enter tg_reduce_rho_5'
 
      IF ( desc%nproc2 > 1 ) THEN
 #if defined(__MPI)
-        CALL MPI_ALLREDUCE( MPI_IN_PLACE, tmp_rhos, 2*SIZE(tmp_rhos), MPI_DOUBLE_PRECISION, MPI_SUM, desc%comm2, ierr )
+        allocate(tmp_rhos_sendbuf, source=tmp_rhos)
+        CALL MPI_ALLREDUCE( tmp_rhos_sendbuf, tmp_rhos, 2*SIZE(tmp_rhos), MPI_DOUBLE_PRECISION, MPI_SUM, desc%comm2, ierr )
+        deallocate(tmp_rhos_sendbuf)
 #endif
      ENDIF
      !
diff -uprN q-e-qe-6.4.1/FFTXlib/fft_types.f90 q-e-qe-6.4.1_winpatch/FFTXlib/fft_types.f90
--- q-e-qe-6.4.1/FFTXlib/fft_types.f90	2019-09-17 23:00:06.639979900 +0900
+++ q-e-qe-6.4.1_winpatch/FFTXlib/fft_types.f90	2019-09-16 03:06:51.000000000 +0900
@@ -922,7 +922,7 @@ CONTAINS
       REAL(DP), INTENT(IN) :: bg(3,3), gcut
 
 ! ... declare other variables
-      INTEGER :: i, j, k, nr, nb(3)
+      INTEGER :: i, j, k, nr, nb(3), nb_sendbuf(3)
       REAL(DP) :: gsq, g(3)
      !write (6,*) ' inside grid_set' ; FLUSH(6)
 
@@ -963,7 +963,8 @@ CONTAINS
       END DO
 
 #if defined(__MPI)
-      CALL MPI_ALLREDUCE( MPI_IN_PLACE, nb, 3, MPI_INTEGER, MPI_MAX, dfft%comm, i )
+      nb_sendbuf = nb
+      CALL MPI_ALLREDUCE( nb_sendbuf, nb, 3, MPI_INTEGER, MPI_MAX, dfft%comm, i )
 #endif
 
 ! ... the size of the 3d FFT matrix depends upon the maximum indices. With
diff -uprN q-e-qe-6.4.1/FFTXlib/stick_base.f90 q-e-qe-6.4.1_winpatch/FFTXlib/stick_base.f90
--- q-e-qe-6.4.1/FFTXlib/stick_base.f90	2019-09-17 23:00:06.828085500 +0900
+++ q-e-qe-6.4.1_winpatch/FFTXlib/stick_base.f90	2019-09-16 03:26:19.000000000 +0900
@@ -193,10 +193,11 @@ CONTAINS
       !     stick map for wave functions, note that map is taken in YZ plane
       !
       INTEGER, INTENT(out) :: st( lb(1) : ub(1), lb(2) : ub(2) )
+      INTEGER, allocatable :: st_sendbuf(:,:)
       REAL(DP) :: b1(3), b2(3), b3(3) 
       INTEGER :: i1, i2, i3, n1, n2, n3, mype, nproc, ierr
       REAL(DP) :: amod
-      INTEGER :: ngm
+      INTEGER :: ngm, ngm_sendbuf
       !write (6,*) 'inside sticks_map_set gcut=',gcut; FLUSH(6)
       !write (6,*) ub,lb
 
@@ -250,8 +251,11 @@ CONTAINS
 
 #if defined(__MPI)
       IF( PRESENT( comm ) ) THEN
-         CALL MPI_ALLREDUCE(MPI_IN_PLACE, st, size(st), MPI_INTEGER, MPI_SUM, comm, ierr)
-         CALL MPI_ALLREDUCE(MPI_IN_PLACE, ngm, 1, MPI_INTEGER, MPI_SUM, comm, ierr)
+         allocate(st_sendbuf, source=st)
+         ngm_sendbuf = ngm
+         CALL MPI_ALLREDUCE(st_sendbuf, st, size(st), MPI_INTEGER, MPI_SUM, comm, ierr)
+         CALL MPI_ALLREDUCE(ngm_sendbuf, ngm, 1, MPI_INTEGER, MPI_SUM, comm, ierr)
+         deallocate(st_sendbuf)
       END IF
 #endif
 
diff -uprN q-e-qe-6.4.1/FFTXlib/tg_gather.f90 q-e-qe-6.4.1_winpatch/FFTXlib/tg_gather.f90
--- q-e-qe-6.4.1/FFTXlib/tg_gather.f90	2019-09-17 23:00:06.921345200 +0900
+++ q-e-qe-6.4.1_winpatch/FFTXlib/tg_gather.f90	2019-09-16 03:24:34.000000000 +0900
@@ -10,6 +10,7 @@ SUBROUTINE tg_gather( dffts, v, tg_v )
   TYPE(fft_type_descriptor), INTENT(in) :: dffts
   REAL(DP), INTENT(IN)  :: v(dffts%nnr)
   REAL(DP), INTENT(OUT) :: tg_v(dffts%nnr_tg)
+  REAL(DP), allocatable :: tg_v_sendbuf(:)
 
   INTEGER :: nxyp, ir3, off, tg_off
   INTEGER :: i, nsiz, ierr
@@ -31,7 +32,9 @@ SUBROUTINE tg_gather( dffts, v, tg_v )
 #if defined(__MPI)
 !used to be   CALL mp_sum(tg_v, dffts%comm2 )
   nsiz =dffts%nnr_tg
-  CALL MPI_ALLREDUCE( MPI_IN_PLACE, tg_v, nsiz, MPI_DOUBLE_PRECISION, MPI_SUM, dffts%comm2, ierr )
+  allocate(tg_v_sendbuf, source=tg_v)
+  CALL MPI_ALLREDUCE( tg_v_sendbuf, tg_v, nsiz, MPI_DOUBLE_PRECISION, MPI_SUM, dffts%comm2, ierr )
+  deallocate(tg_v_sendbuf)
   IF( ierr /= 0 ) CALL fftx_error__( ' tg_gather ', ' MPI_ALLREDUCE ', abs( ierr ) )
 !- could be done (more efficintly?) with an ALLgatherv but the loigc of the ALLREDUCE is simpler
 !  CALL MPI_Allgatherv( v(1), nsiz, MPI_DOUBLE_PRECISION, &
@@ -53,6 +56,7 @@ SUBROUTINE tg_cgather( dffts, v, tg_v )
   TYPE(fft_type_descriptor), INTENT(in) :: dffts
   COMPLEX(DP), INTENT(IN)  :: v(dffts%nnr)
   COMPLEX(DP), INTENT(OUT) :: tg_v(dffts%nnr_tg)
+  COMPLEX(DP), allocatable :: tg_v_sendbuf(:)
 
   INTEGER :: nxyp, ir3, off, tg_off
   INTEGER :: i, nsiz, ierr
@@ -74,7 +78,9 @@ SUBROUTINE tg_cgather( dffts, v, tg_v )
 #if defined(__MPI)
 !used to be   CALL mp_sum(tg_v, dffts%comm2 )
   nsiz =2 * dffts%nnr_tg
-  CALL MPI_ALLREDUCE( MPI_IN_PLACE, tg_v, nsiz, MPI_DOUBLE_PRECISION, MPI_SUM, dffts%comm2, ierr )
+  allocate(tg_v_sendbuf, source=tg_v)
+  CALL MPI_ALLREDUCE( tg_v_sendbuf, tg_v, nsiz, MPI_DOUBLE_PRECISION, MPI_SUM, dffts%comm2, ierr )
+  deallocate(tg_v_sendbuf)
   IF( ierr /= 0 ) CALL fftx_error__( ' tg_gather ', ' MPI_ALLREDUCE ', abs( ierr ) )
 !- could be done (more efficintly?) with an ALLgatherv but the loigc of the ALLREDUCE is simpler
 !  CALL MPI_Allgatherv( v(1), nsiz, MPI_DOUBLE_PRECISION, &
diff -uprN q-e-qe-6.4.1/GWW/bse/Makefile q-e-qe-6.4.1_winpatch/GWW/bse/Makefile
--- q-e-qe-6.4.1/GWW/bse/Makefile	2019-09-17 23:00:15.061678700 +0900
+++ q-e-qe-6.4.1_winpatch/GWW/bse/Makefile	2019-09-16 07:18:40.410990400 +0900
@@ -57,7 +57,7 @@ all : tldeps bse_main.x
 
 bse_main.x : bse_main.o libbse.a  $(BSEOBJS) $(PWOBJS) $(QEMODS) $(GWWOBJ)
 	$(LD) $(LDFLAGS) -o $@ \
-		bse_main.o libbse.a $(PWOBJS) $(QEMODS) $(LIBOBJS) $(QELIBS)  $(PW4GWWOBJ) $(GWWOBJ)
+		bse_main.o libbse.a $(PWOBJS) $(QEMODS) $(LIBOBJS) $(PW4GWWOBJ) $(GWWOBJ) $(QELIBS)  
 	- ( cd ../../bin ; ln -fs ../GWW/bse/$@ . )
  
 tldeps:
diff -uprN q-e-qe-6.4.1/LAXlib/dspev_drv.f90 q-e-qe-6.4.1_winpatch/LAXlib/dspev_drv.f90
--- q-e-qe-6.4.1/LAXlib/dspev_drv.f90	2019-09-17 23:00:23.686779200 +0900
+++ q-e-qe-6.4.1_winpatch/LAXlib/dspev_drv.f90	2019-09-16 03:01:14.000000000 +0900
@@ -103,7 +103,7 @@ CONTAINS
 !
       REAL(DP), external ::ddot
 !
-      REAL(DP) :: g, scalef, sigma, kappa, f, h, tmp
+      REAL(DP) :: g, scalef, sigma, kappa, f, h, tmp, scalef_sendbuf
       REAL(DP), ALLOCATABLE :: u(:)
       REAL(DP), ALLOCATABLE :: p(:)
       REAL(DP), ALLOCATABLE :: vtmp(:)
@@ -148,7 +148,8 @@ CONTAINS
            END DO
 
 #if defined __MPI
-           CALL MPI_ALLREDUCE( MPI_IN_PLACE, scalef, 1, MPI_DOUBLE_PRECISION, MPI_SUM, comm, ierr )
+           scalef_sendbuf = scalef
+           CALL MPI_ALLREDUCE( scalef_sendbuf, scalef, 1, MPI_DOUBLE_PRECISION, MPI_SUM, comm, ierr )
            IF( ierr /= 0 ) CALL lax_error__( ' ptredv ', 'error in mpi_allreduce 1', ierr )
 #endif
 
diff -uprN q-e-qe-6.4.1/LAXlib/zhpev_drv.f90 q-e-qe-6.4.1_winpatch/LAXlib/zhpev_drv.f90
--- q-e-qe-6.4.1/LAXlib/zhpev_drv.f90	2019-09-17 23:00:24.014655600 +0900
+++ q-e-qe-6.4.1_winpatch/LAXlib/zhpev_drv.f90	2019-09-16 03:05:49.000000000 +0900
@@ -53,7 +53,7 @@ CONTAINS
 !     ..
 !     .. Array Arguments ..
       REAL(DP)             D( * ), E( * )
-      COMPLEX(DP)         AP(LDA, * ), TAU( * )
+      COMPLEX(DP)         AP(LDA, * ), TAU( * ), tau_sendbuf(n-1)
 !     ..
 !
 !  Purpose
@@ -154,9 +154,9 @@ CONTAINS
 !     .. Local __SCALARs ..
       INTEGER            J, I, I1, K, I2, NI1, JL
       INTEGER            KL, J1
-      COMPLEX(DP)         ALPHA, TAUI
+      COMPLEX(DP)         ALPHA, TAUI, alpha_sendbuf
       INTEGER            KNT, IERR
-      REAL(DP)             ALPHI, ALPHR, BETA, RSAFMN, SAFMIN, XNORM
+      REAL(DP)             ALPHI, ALPHR, BETA, RSAFMN, SAFMIN, XNORM, xnorm_sendbuf
 !     ..
 !     .. External Subroutines ..
       EXTERNAL           zaxpy
@@ -227,8 +227,9 @@ CONTAINS
                    XNORM = 0.0_DP
                 END IF
 #if defined __MPI
-                XNORM = XNORM ** 2 
-                CALL MPI_ALLREDUCE( MPI_IN_PLACE, xnorm, 1, MPI_DOUBLE_PRECISION, MPI_SUM, comm, ierr )
+                XNORM = XNORM ** 2
+                xnorm_sendbuf = xnorm
+                CALL MPI_ALLREDUCE( xnorm_sendbuf, xnorm, 1, MPI_DOUBLE_PRECISION, MPI_SUM, comm, ierr )
                 IF( ierr /= 0 ) CALL lax_error__( ' pzhptrd ', 'error in mpi_allreduce 1', ierr )
                 XNORM = SQRT( xnorm )
 #endif
@@ -262,7 +263,8 @@ CONTAINS
                     XNORM = DZNRM2( NI1, AP( I2, I ), 1 )
 #if defined __MPI
                     XNORM = XNORM ** 2 
-                    CALL MPI_ALLREDUCE( MPI_IN_PLACE, xnorm, 1, MPI_DOUBLE_PRECISION, MPI_SUM, comm, ierr )
+                    xnorm_sendbuf = xnorm
+                    CALL MPI_ALLREDUCE( xnorm_sendbuf, xnorm, 1, MPI_DOUBLE_PRECISION, MPI_SUM, comm, ierr )
                     IF( ierr /= 0 ) CALL lax_error__( ' pzhptrd ', 'error in mpi_allreduce 2', ierr )
                     XNORM = SQRT( XNORM )
 #endif
@@ -359,7 +361,8 @@ CONTAINS
 
 #if defined __MPI
                ! ... parallel sum TAU
-               CALL MPI_ALLREDUCE( MPI_IN_PLACE, tau( i ), 2*(n - i + 1), MPI_DOUBLE_PRECISION, MPI_SUM, comm, ierr )
+               tau_sendbuf(i:n-1) = tau(i:n-1)
+               CALL MPI_ALLREDUCE( tau_sendbuf(i), tau( i ), 2*(n - i + 1), MPI_DOUBLE_PRECISION, MPI_SUM, comm, ierr )
                IF( ierr /= 0 ) CALL lax_error__( ' pzhptrd ', 'error in mpi_allreduce 3', ierr )
 #endif
 !
@@ -387,7 +390,8 @@ CONTAINS
                END IF
 
 #if defined __MPI
-               CALL MPI_ALLREDUCE( MPI_IN_PLACE, alpha, 2, MPI_DOUBLE_PRECISION, MPI_SUM, comm, ierr )
+               alpha_sendbuf = alpha
+               CALL MPI_ALLREDUCE( alpha_sendbuf, alpha, 2, MPI_DOUBLE_PRECISION, MPI_SUM, comm, ierr )
                IF( ierr /= 0 ) CALL lax_error__( ' pzhptrd ', 'error in mpi_allreduce 4', ierr )
 #endif
 
@@ -577,7 +581,7 @@ CONTAINS
       INTEGER IL(N+1)
       INTEGER OW(N+1)
       COMPLEX(DP) CTMP
-      COMPLEX(DP) WORK(N+1)
+      COMPLEX(DP) WORK(N+1), work_sendbuf(n+1)
 
 !     ..
 !     .. Local __SCALARs ..
@@ -686,7 +690,8 @@ CONTAINS
               END IF
 
 #if defined __MPI
-              CALL MPI_ALLREDUCE( MPI_IN_PLACE, work, 2*(n - 1 - i), MPI_DOUBLE_PRECISION, MPI_SUM, comm, ierr )
+              work_sendbuf(1:n-1-i) = work(1:n-1-i)
+              CALL MPI_ALLREDUCE( work_sendbuf, work, 2*(n - 1 - i), MPI_DOUBLE_PRECISION, MPI_SUM, comm, ierr )
               IF( ierr /= 0 ) CALL lax_error__( ' pzupgtr ', 'error in mpi_allreduce 1', ierr )
 #endif
               !
diff -uprN q-e-qe-6.4.1/UtilXlib/mp.f90 q-e-qe-6.4.1_winpatch/UtilXlib/mp.f90
--- q-e-qe-6.4.1/UtilXlib/mp.f90	2019-09-17 23:01:29.077378600 +0900
+++ q-e-qe-6.4.1_winpatch/UtilXlib/mp.f90	2019-09-16 03:22:07.000000000 +0900
@@ -2127,6 +2127,7 @@
         INTEGER, INTENT(IN) :: recvcount(:), displs(:)
         INTEGER, INTENT(IN) :: root, gid
         INTEGER :: ierr, npe, myid
+        COMPLEX(DP), allocatable :: alldata_sendbuf(:,:)
 
 #if defined (__MPI)
         CALL mpi_comm_size( gid, npe, ierr )
@@ -2136,13 +2137,10 @@
         !
         IF ( SIZE( recvcount ) < npe .OR. SIZE( displs ) < npe ) CALL mp_stop( 8071 )
         !
-        IF (myid==root) THEN
-           CALL MPI_GATHERV( MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, &
-                             alldata, recvcount, displs, my_column_type, root, gid, ierr )
-        ELSE
-           CALL MPI_GATHERV( alldata(1,displs(myid+1)+1), recvcount(myid+1), my_column_type, &
-                             MPI_IN_PLACE, recvcount, displs, MPI_DATATYPE_NULL, root, gid, ierr )
-        ENDIF
+        allocate(alldata_sendbuf, source=alldata)
+        CALL MPI_GATHERV( alldata_sendbuf(1,displs(myid+1)+1), recvcount(myid+1), my_column_type, &
+                          alldata, recvcount, displs, my_column_type, root, gid, ierr )
+        deallocate(alldata_sendbuf)
         IF (ierr/=0) CALL mp_stop( 8074 )
 #endif
         RETURN
@@ -2159,6 +2157,7 @@
         INTEGER, INTENT(IN) :: recvcount(:), displs(:)
         INTEGER, INTENT(IN) :: gid
         INTEGER :: ierr, npe, myid
+        COMPLEX(DP),allocatable :: alldata_sendbuf(:,:)
 
 #if defined (__MPI)
         CALL mpi_comm_size( gid, npe, ierr )
@@ -2168,8 +2167,10 @@
         !
         IF ( SIZE( recvcount ) < npe .OR. SIZE( displs ) < npe ) CALL mp_stop( 8071 )
         !
-        CALL MPI_ALLGATHERV( MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, &
-                             alldata, recvcount, displs, my_element_type, gid, ierr )
+        allocate(alldata_sendbuf, source=alldata)
+        CALL MPI_ALLGATHERV( alldata_sendbuf, 0, MPI_DATATYPE_NULL, &
+             alldata, recvcount, displs, my_element_type, gid, ierr )
+        deallocate(alldata_sendbuf)
         IF (ierr/=0) CALL mp_stop( 8074 )
 #endif
         RETURN
@@ -5550,13 +5551,10 @@ END SUBROUTINE mp_type_free
          IF ( SIZE( recvcount ) < npe .OR. SIZE( displs ) < npe ) CALL mp_stop( 9129 )
          !
          ierr = cudaDeviceSynchronize()   ! This syncs __GPU_MPI
-         IF (myid==root) THEN
-            CALL MPI_GATHERV( MPI_IN_PLACE, 0, MPI_DATATYPE_NULL, &
-                              alldata_d, recvcount, displs, my_column_type, root, gid, ierr )
-         ELSE
-            CALL MPI_GATHERV( alldata_d(1,displs(myid+1)+1), recvcount(myid+1), my_column_type, &
-                              MPI_IN_PLACE, recvcount, displs, MPI_DATATYPE_NULL, root, gid, ierr )
-         ENDIF
+         ALLOCATE(alldata_h, source=alldata_d)
+         CALL MPI_GATHERV( alldata_h(1,displs(myid+1)+1), recvcount(myid+1), my_column_type, &
+                           alldata_d, recvcount, displs, my_column_type, root, gid, ierr )
+         deallocate(alldata_h)
          !
          IF (ierr/=0) CALL mp_stop( 9130 )
          !
@@ -5564,7 +5562,7 @@ END SUBROUTINE mp_type_free
 #endif
 #endif
          ierr = cudaDeviceSynchronize()   ! This syncs SERIAL
-      END SUBROUTINE mp_gatherv_inplace_cplx_array_gpu
+      END SUBROUTINE mp_gatherv_inplace_cplx_array_gp
 
 !------------------------------------------------------------------------------!
 !..mp_allgatherv_inplace_cplx_array
diff -uprN q-e-qe-6.4.1/UtilXlib/mp_base.f90 q-e-qe-6.4.1_winpatch/UtilXlib/mp_base.f90
--- q-e-qe-6.4.1/UtilXlib/mp_base.f90	2019-09-17 23:01:29.123885800 +0900
+++ q-e-qe-6.4.1_winpatch/UtilXlib/mp_base.f90	2019-09-16 01:55:59.000000000 +0900
@@ -227,7 +227,7 @@ SUBROUTINE reduce_base_real( dim, ps, co
   IMPLICIT NONE
   !
   INTEGER,  INTENT(IN)    :: dim     ! size of the array
-  REAL(DP)                :: ps(dim) ! array whose elements have to be reduced
+  REAL(DP)                :: ps(dim), ps_sendbuf(dim)! array whose elements have to be reduced
   INTEGER,  INTENT(IN)    :: comm    ! communicator
   INTEGER,  INTENT(IN)    :: root    ! if root <  0 perform a reduction to all procs
                                      ! if root >= 0 perform a reduce only to root proc.
@@ -248,11 +248,12 @@ SUBROUTINE reduce_base_real( dim, ps, co
   CALL mp_synchronize( comm )
 #endif
   !
+  ps_sendbuf = ps
   IF( root >= 0 ) THEN
-     CALL MPI_REDUCE( MPI_IN_PLACE, ps, dim, MPI_DOUBLE_PRECISION, MPI_SUM, root, comm, info )
+     CALL MPI_REDUCE( ps_sendbuf, ps, dim, MPI_DOUBLE_PRECISION, MPI_SUM, root, comm, info )
      IF( info /= 0 ) CALL errore( 'reduce_base_real', 'error in mpi_reduce 1', info )
   ELSE
-     CALL MPI_ALLREDUCE( MPI_IN_PLACE, ps, dim, MPI_DOUBLE_PRECISION, MPI_SUM, comm, info )
+     CALL MPI_ALLREDUCE( ps_sendbuf, ps, dim, MPI_DOUBLE_PRECISION, MPI_SUM, comm, info )
      IF( info /= 0 ) CALL errore( 'reduce_base_real', 'error in mpi_allreduce 1', info )
   END IF
   !
@@ -383,7 +384,7 @@ SUBROUTINE reduce_base_integer( dim, ps,
   IMPLICIT NONE
   !
   INTEGER,  INTENT(IN)    :: dim
-  INTEGER                 :: ps(dim)
+  INTEGER                 :: ps(dim), ps_sendbuf(dim)
   INTEGER,  INTENT(IN)    :: comm    ! communicator
   INTEGER,  INTENT(IN)    :: root    ! if root <  0 perform a reduction to all procs
                                      ! if root >= 0 perform a reduce only to root proc.
@@ -402,11 +403,12 @@ SUBROUTINE reduce_base_integer( dim, ps,
   CALL mp_synchronize( comm )
 #endif
   !
+  ps_sendbuf = ps
   IF( root >= 0 ) THEN
-     CALL MPI_REDUCE( MPI_IN_PLACE, ps, dim, MPI_INTEGER, MPI_SUM, root, comm, info )
+     CALL MPI_REDUCE( ps_sendbuf, ps, dim, MPI_INTEGER, MPI_SUM, root, comm, info )
      IF( info /= 0 ) CALL errore( 'reduce_base_integer', 'error in mpi_reduce 1', info )
   ELSE
-     CALL MPI_ALLREDUCE( MPI_IN_PLACE, ps, dim, MPI_INTEGER, MPI_SUM, comm, info )
+     CALL MPI_ALLREDUCE( ps_sendbuf, ps, dim, MPI_INTEGER, MPI_SUM, comm, info )
      IF( info /= 0 ) CALL errore( 'reduce_base_integer', 'error in mpi_allreduce 1', info )
   END IF
   !
diff -uprN q-e-qe-6.4.1/clib/sockets.c q-e-qe-6.4.1_winpatch/clib/sockets.c
--- q-e-qe-6.4.1/clib/sockets.c	2019-09-17 23:02:12.140130800 +0900
+++ q-e-qe-6.4.1_winpatch/clib/sockets.c	2019-09-16 04:06:51.678721900 +0900
@@ -40,10 +40,11 @@ Functions:
 #include <unistd.h>
 #include <string.h>
 #include <sys/types.h>
-#include <sys/socket.h>
-#include <netinet/in.h>
-#include <sys/un.h>
-#include <netdb.h>
+//#include <sys/socket.h>
+//#include <netinet/in.h>
+//#include <sys/un.h>
+//#include <netdb.h>
+#include <ws2tcpip.h>
 
 void open_socket(int *psockfd, int* inet, int* port, const char* host)
 /* Opens a socket.
@@ -88,7 +89,7 @@ Args:
       if (connect(sockfd, res->ai_addr, res->ai_addrlen) < 0) 
       { perror("Error opening INET socket: wrong port or server unreachable"); exit(-1); }
       freeaddrinfo(res);
-   }
+   }/*
    else
    {  
       struct sockaddr_un serv_addr;
@@ -106,7 +107,7 @@ Args:
       // connects
       if (connect(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) 
       { perror("Error opening UNIX socket: path unavailable, or already existing"); exit(-1); }
-   }
+   }*/
 
 
    *psockfd=sockfd;
diff -uprN q-e-qe-6.4.1/make.inc q-e-qe-6.4.1_winpatch/make.inc
--- q-e-qe-6.4.1/make.inc	2019-09-17 23:05:14.888672200 +0900
+++ q-e-qe-6.4.1_winpatch/make.inc	2019-09-17 23:44:49.694481200 +0900
@@ -51,7 +51,7 @@ FDFLAGS        = $(DFLAGS) $(MANUAL_DFLA
 #          the latter contains .e.g. files needed by FFT libraries
 # for libxc add -I/path/to/libxc/include/
 
-IFLAGS         = -I$(TOPDIR)/include -I$(TOPDIR)/FoX/finclude -I$(TOPDIR)/S3DE/iotk/include/
+IFLAGS         = -I$(TOPDIR)/include -I$(TOPDIR)/FoX/finclude -I$(TOPDIR)/S3DE/iotk/include/ -I../include/ -I$(TOPDIR)/../../msmpi32 -I"C:\Program Files (x86)\IntelSWTools\compilers_and_libraries\windows\mkl\include"
 
 # MOD_FLAG = flag used by f90 compiler to locate modules
 
@@ -104,7 +104,7 @@ CPPFLAGS       = -P -traditional $(DFLAG
 
 CFLAGS         = -O3 $(DFLAGS) $(IFLAGS)
 F90FLAGS       = $(FFLAGS) $(FDFLAGS) $(CUDA_F90FLAGS) $(IFLAGS) $(MODFLAGS)
-FFLAGS         = -O1
+FFLAGS         = -O3 -g -fno-range-check -fno-trapping-math -ffpe-summary=no -fallow-invalid-boz -fallow-argument-mismatch
 
 # compiler flags without optimization for fortran-77
 # the latter is NEEDED to properly compile dlamch.f, used by lapack
@@ -121,8 +121,8 @@ FFLAGS_NOMAIN   =
 # for libxc, set LD_LIBS=-L/path/to/libxc/lib/ -lxcf90 -lxc
 
 LD             = gfortran
-LDFLAGS        = 
-LD_LIBS        = 
+LDFLAGS        = -g -pthread -fno-range-check -fno-trapping-math -ffpe-summary=no -fallow-invalid-boz -fallow-argument-mismatch
+LD_LIBS        = -lws2_32
 
 # External Libraries (if any) : blas, lapack, fft, MPI
 
@@ -130,7 +130,7 @@ LD_LIBS        =
 # BLAS_LIBS = /your/path/to/espresso/LAPACK/blas.a
 # BLAS_LIBS_SWITCH = internal
 
-BLAS_LIBS      = 
+BLAS_LIBS      = -L"C:\Program Files (x86)\IntelSWTools\compilers_and_libraries\windows\mkl\lib\ia32" -lmkl_rt
 BLAS_LIBS_SWITCH = external
 
 # If you have nothing better, use the local copy via "--with-netlib" :
@@ -139,15 +139,15 @@ BLAS_LIBS_SWITCH = external
 # For IBM machines with essl (-D__ESSL): load essl BEFORE lapack !
 # remember that LAPACK_LIBS precedes BLAS_LIBS in loading order
 
-LAPACK_LIBS    = $(TOPDIR)/LAPACK/liblapack.a $(TOPDIR)/LAPACK/libblas.a
-LAPACK_LIBS_SWITCH = internal
+LAPACK_LIBS    = -L"C:\Program Files (x86)\IntelSWTools\compilers_and_libraries\windows\mkl\lib\ia32" -lmkl_rt
+LAPACK_LIBS_SWITCH = external
 
 SCALAPACK_LIBS = 
 
 # nothing needed here if the the internal copy of FFTW is compiled
 # (needs -D__FFTW in DFLAGS)
 
-FFT_LIBS       = 
+FFT_LIBS       = -L"C:\Program Files (x86)\IntelSWTools\compilers_and_libraries\windows\mkl\lib\ia32" -lmkl_rt
 
 # HDF5
 HDF5_LIB = 
@@ -157,7 +157,7 @@ FOX_FLAGS =
 # For parallel execution, the correct path to MPI libraries must
 # be specified in MPI_LIBS (except for IBM if you use mpxlf)
 
-MPI_LIBS       = 
+MPI_LIBS       = $(TOPDIR)/../../msmpi32/msmpi.dll
 
 # IBM-specific: MASS libraries, if available and if -D__MASS is defined in FDFLAGS
 
